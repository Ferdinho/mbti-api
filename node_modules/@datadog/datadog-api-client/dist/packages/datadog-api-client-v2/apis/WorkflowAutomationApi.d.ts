import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext } from "../../datadog-api-client-common/http/http";
import { WorkflowInstanceCreateRequest } from "../models/WorkflowInstanceCreateRequest";
import { WorkflowInstanceCreateResponse } from "../models/WorkflowInstanceCreateResponse";
import { WorkflowListInstancesResponse } from "../models/WorkflowListInstancesResponse";
import { WorklflowCancelInstanceResponse } from "../models/WorklflowCancelInstanceResponse";
import { WorklflowGetInstanceResponse } from "../models/WorklflowGetInstanceResponse";
export declare class WorkflowAutomationApiRequestFactory extends BaseAPIRequestFactory {
    cancelWorkflowInstance(workflowId: string, instanceId: string, _options?: Configuration): Promise<RequestContext>;
    createWorkflowInstance(workflowId: string, body: WorkflowInstanceCreateRequest, _options?: Configuration): Promise<RequestContext>;
    getWorkflowInstance(workflowId: string, instanceId: string, _options?: Configuration): Promise<RequestContext>;
    listWorkflowInstances(workflowId: string, pageSize?: number, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
}
export declare class WorkflowAutomationApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to cancelWorkflowInstance
     * @throws ApiException if the response code was not in [200, 299]
     */
    cancelWorkflowInstance(response: ResponseContext): Promise<WorklflowCancelInstanceResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createWorkflowInstance
     * @throws ApiException if the response code was not in [200, 299]
     */
    createWorkflowInstance(response: ResponseContext): Promise<WorkflowInstanceCreateResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getWorkflowInstance
     * @throws ApiException if the response code was not in [200, 299]
     */
    getWorkflowInstance(response: ResponseContext): Promise<WorklflowGetInstanceResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to listWorkflowInstances
     * @throws ApiException if the response code was not in [200, 299]
     */
    listWorkflowInstances(response: ResponseContext): Promise<WorkflowListInstancesResponse>;
}
export interface WorkflowAutomationApiCancelWorkflowInstanceRequest {
    /**
     * The ID of the workflow.
     * @type string
     */
    workflowId: string;
    /**
     * The ID of the workflow instance.
     * @type string
     */
    instanceId: string;
}
export interface WorkflowAutomationApiCreateWorkflowInstanceRequest {
    /**
     * The ID of the workflow.
     * @type string
     */
    workflowId: string;
    /**
     * @type WorkflowInstanceCreateRequest
     */
    body: WorkflowInstanceCreateRequest;
}
export interface WorkflowAutomationApiGetWorkflowInstanceRequest {
    /**
     * The ID of the workflow.
     * @type string
     */
    workflowId: string;
    /**
     * The ID of the workflow instance.
     * @type string
     */
    instanceId: string;
}
export interface WorkflowAutomationApiListWorkflowInstancesRequest {
    /**
     * The ID of the workflow.
     * @type string
     */
    workflowId: string;
    /**
     * Size for a given page. The maximum allowed value is 100.
     * @type number
     */
    pageSize?: number;
    /**
     * Specific page number to return.
     * @type number
     */
    pageNumber?: number;
}
export declare class WorkflowAutomationApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: WorkflowAutomationApiRequestFactory, responseProcessor?: WorkflowAutomationApiResponseProcessor);
    /**
     * Cancels a specific execution of a given workflow. This API requires an application key scoped with the workflows_run permission.
     * @param param The request object
     */
    cancelWorkflowInstance(param: WorkflowAutomationApiCancelWorkflowInstanceRequest, options?: Configuration): Promise<WorklflowCancelInstanceResponse>;
    /**
     * Execute the given workflow. This API requires an application key scoped with the workflows_run permission.
     * @param param The request object
     */
    createWorkflowInstance(param: WorkflowAutomationApiCreateWorkflowInstanceRequest, options?: Configuration): Promise<WorkflowInstanceCreateResponse>;
    /**
     * Get a specific execution of a given workflow. This API requires an application key scoped with the workflows_read permission.
     * @param param The request object
     */
    getWorkflowInstance(param: WorkflowAutomationApiGetWorkflowInstanceRequest, options?: Configuration): Promise<WorklflowGetInstanceResponse>;
    /**
     * List all instances of a given workflow. This API requires an application key scoped with the workflows_read permission.
     * @param param The request object
     */
    listWorkflowInstances(param: WorkflowAutomationApiListWorkflowInstancesRequest, options?: Configuration): Promise<WorkflowListInstancesResponse>;
}
