import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext } from "../../datadog-api-client-common/http/http";
import { MicrosoftTeamsApiHandleInfoResponse } from "../models/MicrosoftTeamsApiHandleInfoResponse";
import { MicrosoftTeamsApiHandlesResponse } from "../models/MicrosoftTeamsApiHandlesResponse";
import { MicrosoftTeamsCreateApiHandleRequest } from "../models/MicrosoftTeamsCreateApiHandleRequest";
import { MicrosoftTeamsCreateApiHandleResponse } from "../models/MicrosoftTeamsCreateApiHandleResponse";
import { MicrosoftTeamsGetChannelByNameResponse } from "../models/MicrosoftTeamsGetChannelByNameResponse";
import { MicrosoftTeamsUpdateApiHandleRequest } from "../models/MicrosoftTeamsUpdateApiHandleRequest";
export declare class MicrosoftTeamsIntegrationApiRequestFactory extends BaseAPIRequestFactory {
    createApiHandle(body: MicrosoftTeamsCreateApiHandleRequest, _options?: Configuration): Promise<RequestContext>;
    deleteApiHandle(handleId: string, _options?: Configuration): Promise<RequestContext>;
    getApiHandle(handleId: string, _options?: Configuration): Promise<RequestContext>;
    getApiHandleByName(handleName: string, _options?: Configuration): Promise<RequestContext>;
    getChannelByName(tenantName: string, teamName: string, channelName: string, _options?: Configuration): Promise<RequestContext>;
    listApiHandles(tenantId?: string, _options?: Configuration): Promise<RequestContext>;
    updateApiHandle(handleId: string, body: MicrosoftTeamsUpdateApiHandleRequest, _options?: Configuration): Promise<RequestContext>;
}
export declare class MicrosoftTeamsIntegrationApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createApiHandle
     * @throws ApiException if the response code was not in [200, 299]
     */
    createApiHandle(response: ResponseContext): Promise<MicrosoftTeamsCreateApiHandleResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteApiHandle
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteApiHandle(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getApiHandle
     * @throws ApiException if the response code was not in [200, 299]
     */
    getApiHandle(response: ResponseContext): Promise<MicrosoftTeamsApiHandleInfoResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getApiHandleByName
     * @throws ApiException if the response code was not in [200, 299]
     */
    getApiHandleByName(response: ResponseContext): Promise<MicrosoftTeamsApiHandleInfoResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getChannelByName
     * @throws ApiException if the response code was not in [200, 299]
     */
    getChannelByName(response: ResponseContext): Promise<MicrosoftTeamsGetChannelByNameResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to listApiHandles
     * @throws ApiException if the response code was not in [200, 299]
     */
    listApiHandles(response: ResponseContext): Promise<MicrosoftTeamsApiHandlesResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateApiHandle
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateApiHandle(response: ResponseContext): Promise<MicrosoftTeamsApiHandleInfoResponse>;
}
export interface MicrosoftTeamsIntegrationApiCreateApiHandleRequest {
    /**
     * Handle payload.
     * @type MicrosoftTeamsCreateApiHandleRequest
     */
    body: MicrosoftTeamsCreateApiHandleRequest;
}
export interface MicrosoftTeamsIntegrationApiDeleteApiHandleRequest {
    /**
     * Your handle id.
     * @type string
     */
    handleId: string;
}
export interface MicrosoftTeamsIntegrationApiGetApiHandleRequest {
    /**
     * Your handle id.
     * @type string
     */
    handleId: string;
}
export interface MicrosoftTeamsIntegrationApiGetApiHandleByNameRequest {
    /**
     * Your handle name.
     * @type string
     */
    handleName: string;
}
export interface MicrosoftTeamsIntegrationApiGetChannelByNameRequest {
    /**
     * Your tenant name.
     * @type string
     */
    tenantName: string;
    /**
     * Your team name.
     * @type string
     */
    teamName: string;
    /**
     * Your channel name.
     * @type string
     */
    channelName: string;
}
export interface MicrosoftTeamsIntegrationApiListApiHandlesRequest {
    /**
     * Your tenant id.
     * @type string
     */
    tenantId?: string;
}
export interface MicrosoftTeamsIntegrationApiUpdateApiHandleRequest {
    /**
     * Your handle id.
     * @type string
     */
    handleId: string;
    /**
     * Opsgenie service payload.
     * @type MicrosoftTeamsUpdateApiHandleRequest
     */
    body: MicrosoftTeamsUpdateApiHandleRequest;
}
export declare class MicrosoftTeamsIntegrationApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MicrosoftTeamsIntegrationApiRequestFactory, responseProcessor?: MicrosoftTeamsIntegrationApiResponseProcessor);
    /**
     * Create a handle in the Datadog Microsoft Teams integration.
     * @param param The request object
     */
    createApiHandle(param: MicrosoftTeamsIntegrationApiCreateApiHandleRequest, options?: Configuration): Promise<MicrosoftTeamsCreateApiHandleResponse>;
    /**
     * Delete a handle from the Datadog Microsoft Teams integration.
     * @param param The request object
     */
    deleteApiHandle(param: MicrosoftTeamsIntegrationApiDeleteApiHandleRequest, options?: Configuration): Promise<void>;
    /**
     * Get the tenant, team, and channel information of a handle from the Datadog Microsoft Teams integration.
     * @param param The request object
     */
    getApiHandle(param: MicrosoftTeamsIntegrationApiGetApiHandleRequest, options?: Configuration): Promise<MicrosoftTeamsApiHandleInfoResponse>;
    /**
     * Get the tenant, team, and channel information of a handle by name from the Datadog Microsoft Teams integration.
     * @param param The request object
     */
    getApiHandleByName(param: MicrosoftTeamsIntegrationApiGetApiHandleByNameRequest, options?: Configuration): Promise<MicrosoftTeamsApiHandleInfoResponse>;
    /**
     * Get the tenant, team, and channel ID of a channel in the Datadog Microsoft Teams integration.
     * @param param The request object
     */
    getChannelByName(param: MicrosoftTeamsIntegrationApiGetChannelByNameRequest, options?: Configuration): Promise<MicrosoftTeamsGetChannelByNameResponse>;
    /**
     * Get a list of all handles from the Datadog Microsoft Teams integration.
     * @param param The request object
     */
    listApiHandles(param?: MicrosoftTeamsIntegrationApiListApiHandlesRequest, options?: Configuration): Promise<MicrosoftTeamsApiHandlesResponse>;
    /**
     * Update a handle from the Datadog Microsoft Teams integration.
     * @param param The request object
     */
    updateApiHandle(param: MicrosoftTeamsIntegrationApiUpdateApiHandleRequest, options?: Configuration): Promise<MicrosoftTeamsApiHandleInfoResponse>;
}
